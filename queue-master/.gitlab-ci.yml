stages:
    - build
    - imageBuildAndPush
    - deployDev
    - dt-event
    - jmeter-test
    - imageBuildAndPushStaging
    - deployStag
    - regcred-clean
    - stag-clean
    - deploy-clean
    - deploy-stag-clean

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

maven-build:
    stage: build
    image: maven:3.3.9-jdk-8-alpine
    script:
        - mvn -B clean package
    artifacts:
        paths:
            - "/builds/sockshop/queue-master/target/"

dt-event-push:
    stage: dt-event
    dependencies:
        - "deploy-to-dev"
    image: alpine/curl:8.14.1
    script:        
        - |
          curl -X "POST" "https://$DT_TENANT_UUID.live.dynatrace.com/api/v2/events/ingest" --header "accept: application/json; charset=utf-8" --header "Authorization: Api-Token $DT_ACCESS_TOKEN" --header "Content-Type: application/json; charset=utf-8" --data '{ "entitySelector": "type(SERVICE),tag(app:queue-master),tag(environment:dev)", "eventType": "CUSTOM_INFO", "properties": { "Gitlab Build Number": "$CI_PIPELINE_IID", "Git commit": "$CI_COMMIT_MESSAGE" }, "title": "Deployment Event" }'

docker-buildnpush:
    dependencies:
        - maven-build
    stage: imageBuildAndPush
    image: docker:24.0.5
    services:
        - name: docker:24.0.5-dind
          variables:
            HEALTHCHECK_TCP_PORT: "2376"
    before_script:
        - docker info
    script:
        - docker build -t $CI_REGISTRY_IMAGE:DEV-$CI_PIPELINE_IID .
        - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
        - docker push $CI_REGISTRY_IMAGE:DEV-$CI_PIPELINE_IID
        - echo "AUTH_TOKEN=$(sed -nE '$!{:a;N;$!ba;s/\n//g;s/"auth":[^"]*"([^"]*)"/\n\1\nAUTH/g};/^[^\n]*\nAUTH/P;D' ~/.docker/config.json)" >> auth.env
        - echo "$CI_PIPELINE_IID"
    artifacts:
        reports:
            dotenv: auth.env

deploy-to-dev:
    dependencies:
        - docker-buildnpush
        - maven-build
    stage: deployDev
    image: alpine/kubectl:latest
    script:
        - kubectl create secret docker-registry queuemasterregcred --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$AUTH_TOKEN
        - echo "$CI_DEPLOY_USER, $CI_DEPLOY_PASSWORD"
        - kubectl create secret docker-registry queuemasterdeploycred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD -n dev
        - 'sed -i "s#image: .*#image: $CI_REGISTRY_IMAGE:DEV-$CI_PIPELINE_IID#" manifest/queue-master.yml'
        - "kubectl -n dev apply -f manifest/queue-master.yml"
        - kubectl wait pod -l app=queue-master  -n dev --for=condition=Ready --timeout=300s
        - kubectl delete secret queuemasterregcred
        - kubectl delete secret queuemasterdeploycred -n dev

jmeter-tests:
    dependencies:
        - maven-build
    needs:
        - deploy-to-dev
        - maven-build
    stage: jmeter-test
    image: dynatraceace/jmeter-runner:1.0.0-acl
    script:
        - /jmeter/bin/jmeter.sh -n -t jmeter/basiccheck.jmx -l HealthCheck_queue-master_dev_$VERSION-$CI_PIPELINE_IID -JSERVER_URL=queue-master.dev -JSERVER_PORT=80 -JCHECK_PATH "/health" -JVUCount=1 -JLoopCount=1 -JDT_LTN="HealthCheck_1" -JTestDuration='120' -JThinkTime='250' > Basicresults.txt
        - RESULT=$(awk '/Err:\s*/{print $15}' Basicresults.txt)
        - GOAL="0"
        - echo $RESULT
        - RESULT=$(echo "$RESULT")
        - if [ $RESULT != $GOAL ]; then cat BasicResults.txt && echo "jmeter returned error" && exit 63; fi
        - /jmeter/bin/jmeter.sh -n -t jmeter/queue-master_load.jmx -l FuncCheck_queue-master_dev_$VERSION-$CI_PIPELINE_IID -JSERVER_URL=queue-master.dev -JSERVER_PORT=80 -JCHECK_PATH "/health" -JVUCount=1 -JLoopCount=1 -JDT_LTN="FuncCheck_1" -JTestDuration='120' -JThinkTime='250' > Funcresults.txt
        - RESULT=$(awk '/Err:\s*/{print $15}' Funcresults.txt)
        - echo $RESULT
        - RESULT=$(echo "$RESULT")
        - if [ $RESULT != $GOAL ]; then cat FuncResults.txt && echo "jmeter returned error" && exit 63; fi

docker-buildnpush-staging:
    dependencies:
        - jmeter-tests
        - maven-build
    stage: imageBuildAndPushStaging
    rules:
        - if: $CI_COMMIT_TAG 
    image: docker:24.0.5
    services:
        - name: docker:24.0.5-dind
          variables:
            HEALTHCHECK_TCP_PORT: "2376"
    before_script:
        - docker info
    script:
        - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
        - docker pull $CI_REGISTRY_IMAGE:DEV-$CI_PIPELINE_IID
        - docker tag $CI_REGISTRY_IMAGE:DEV-$CI_PIPELINE_IID $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-$CI_PIPELINE_IID
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-$CI_PIPELINE_IID
        - echo "AUTH_TOKEN=$(sed -nE '$!{:a;N;$!ba;s/\n//g;s/"auth":[^"]*"([^"]*)"/\n\1\nAUTH/g};/^[^\n]*\nAUTH/P;D' ~/.docker/config.json)" >> auth.env

release_job:
  stage: release
  dependencies:
        - docker-buildnpush-staging
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - echo "running release_job"
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'

deploy-to-staging:
    dependencies:
        - docker-buildnpush
        - docker-buildnpush-staging
        - maven-build
    stage: deployStag
    rules:
        - if: $CI_COMMIT_TAG 
    image: alpine/kubectl:latest
    script:
        - kubectl create secret docker-registry queuemasterregcred --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$AUTH_TOKEN
        - echo "$CI_DEPLOY_USER, $CI_DEPLOY_PASSWORD"
        - kubectl create secret docker-registry queuemasterdeploycred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD -n staging
        - 'sed -i "s#image: .*#image: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG-$CI_PIPELINE_IID#" manifest/queue-master.yml'
        - 'sed -i "s#namespace: .*#namespace: staging#" manifest/queue-master.yml'
        - "kubectl -n staging apply -f manifest/queue-master.yml"
        - kubectl delete pod -l app=queue-master -n staging
        - kubectl wait pod -l app=queue-master  -n staging --for=condition=Ready --timeout=300s
        - kubectl delete secret queuemasterregcred
        - kubectl delete secret queuemasterdeploycred -n staging

regcred-cleaner:
    rules:
        - when: on_failure
    stage: regcred-clean
    image: alpine/kubectl:latest
    script:
        - kubectl delete secret queuemasterregcred
    allow_failure: true

deploy-cleaner:
    rules:
        - when: on_failure
    stage: deploy-clean
    image: alpine/kubectl:latest
    script:
        - kubectl delete secret queuemasterdeploycred -n dev
    allow_failure: true

deploy-stag-cleaner:
    rules:
        - when: on_failure
        - if: $CI_COMMIT_TAG
    stage: deploy-stag-clean
    image: alpine/kubectl:latest
    script:
        - kubectl delete secret queuemasterdeploycred -n staging
    allow_failure: true

staging-cleaner:
    rules:
        - when: on_failure
        - if: $CI_COMMIT_TAG
    stage: stag-clean
    image: alpine/kubectl:latest
    script:
        - "kubectl -n staging delete -f manifest/queue-master.yml"
    allow_failure: true